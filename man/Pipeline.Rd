% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class_Pipeline.R
\name{Pipeline}
\alias{Pipeline}
\title{xxx}
\description{
xxxx
}
\section{Super class}{
\code{\link[Magellan:ScreenManager]{Magellan::ScreenManager}} -> \code{Pipeline}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{tmp.return}}{xxx}

\item{\code{modal_txt}}{Text to be showed in the popup window when the user clicks on the `Reset pipeline` button.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ToggleState_Screens}{\code{Pipeline$ToggleState_Screens()}}
\item \href{#method-Discover_Skipped_Steps}{\code{Pipeline$Discover_Skipped_Steps()}}
\item \href{#method-Set_All_Reset}{\code{Pipeline$Set_All_Reset()}}
\item \href{#method-ValidateCurrentPos}{\code{Pipeline$ValidateCurrentPos()}}
\item \href{#method-Additional_Server_Funcs}{\code{Pipeline$Additional_Server_Funcs()}}
\item \href{#method-ActionOn_NewPosition}{\code{Pipeline$ActionOn_NewPosition()}}
\item \href{#method-EncapsulateScreens}{\code{Pipeline$EncapsulateScreens()}}
\item \href{#method-GetScreens_ui}{\code{Pipeline$GetScreens_ui()}}
\item \href{#method-ActionOn_New_DataIn}{\code{Pipeline$ActionOn_New_DataIn()}}
\item \href{#method-Launch_Module_Server}{\code{Pipeline$Launch_Module_Server()}}
\item \href{#method-Global_server}{\code{Pipeline$Global_server()}}
\item \href{#method-ActionOn_Data_Trigger}{\code{Pipeline$ActionOn_Data_Trigger()}}
\item \href{#method-GetMaxValidated_BeforeCurrentPos}{\code{Pipeline$GetMaxValidated_BeforeCurrentPos()}}
\item \href{#method-GetMaxValidated_BeforePos}{\code{Pipeline$GetMaxValidated_BeforePos()}}
\item \href{#method-PrepareData2Send}{\code{Pipeline$PrepareData2Send()}}
\item \href{#method-clone}{\code{Pipeline$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="Magellan" data-topic="ScreenManager" data-id="Change_Current_Pos">}\href{../../Magellan/html/ScreenManager.html#method-Change_Current_Pos}{\code{Magellan::ScreenManager$Change_Current_Pos()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="Magellan" data-topic="ScreenManager" data-id="Get_Result">}\href{../../Magellan/html/ScreenManager.html#method-Get_Result}{\code{Magellan::ScreenManager$Get_Result()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="Magellan" data-topic="ScreenManager" data-id="Set_Reseted">}\href{../../Magellan/html/ScreenManager.html#method-Set_Reseted}{\code{Magellan::ScreenManager$Set_Reseted()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="Magellan" data-topic="ScreenManager" data-id="Set_Skipped">}\href{../../Magellan/html/ScreenManager.html#method-Set_Skipped}{\code{Magellan::ScreenManager$Set_Skipped()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="Magellan" data-topic="ScreenManager" data-id="initialize">}\href{../../Magellan/html/ScreenManager.html#method-initialize}{\code{Magellan::ScreenManager$initialize()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="Magellan" data-topic="ScreenManager" data-id="server">}\href{../../Magellan/html/ScreenManager.html#method-server}{\code{Magellan::ScreenManager$server()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="Magellan" data-topic="ScreenManager" data-id="ui">}\href{../../Magellan/html/ScreenManager.html#method-ui}{\code{Magellan::ScreenManager$ui()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ToggleState_Screens"></a>}}
\if{latex}{\out{\hypertarget{method-ToggleState_Screens}{}}}
\subsection{Method \code{ToggleState_Screens()}}{
Additional functions that are to be inserted in the initialize function of
the parent class.


xxx
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$ToggleState_Screens(cond, range)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{cond}}{A boolean that indicates whether the corresponding ui must be
enabled (TRUE) or disabled (FALSE).}

\item{\code{range}}{A range of integers to indicate which steps are concerned by the 
condition `cond`}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Nothing
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Discover_Skipped_Steps"></a>}}
\if{latex}{\out{\hypertarget{method-Discover_Skipped_Steps}{}}}
\subsection{Method \code{Discover_Skipped_Steps()}}{
On the basis of the vector `status`, this function searches for skipped steps
(ie unvalidated step for which there exists a validated steps forward)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$Discover_Skipped_Steps()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The vector `status` is updated.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Set_All_Reset"></a>}}
\if{latex}{\out{\hypertarget{method-Set_All_Reset}{}}}
\subsection{Method \code{Set_All_Reset()}}{
xxx
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$Set_All_Reset()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Nothing
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ValidateCurrentPos"></a>}}
\if{latex}{\out{\hypertarget{method-ValidateCurrentPos}{}}}
\subsection{Method \code{ValidateCurrentPos()}}{
xxx
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$ValidateCurrentPos()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Nothing
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Additional_Server_Funcs"></a>}}
\if{latex}{\out{\hypertarget{method-Additional_Server_Funcs}{}}}
\subsection{Method \code{Additional_Server_Funcs()}}{
xxx
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$Additional_Server_Funcs()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Nothing
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ActionOn_NewPosition"></a>}}
\if{latex}{\out{\hypertarget{method-ActionOn_NewPosition}{}}}
\subsection{Method \code{ActionOn_NewPosition()}}{
xxx
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$ActionOn_NewPosition()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Nothing
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EncapsulateScreens"></a>}}
\if{latex}{\out{\hypertarget{method-EncapsulateScreens}{}}}
\subsection{Method \code{EncapsulateScreens()}}{
xxx
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$EncapsulateScreens()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Nothing
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetScreens_ui"></a>}}
\if{latex}{\out{\hypertarget{method-GetScreens_ui}{}}}
\subsection{Method \code{GetScreens_ui()}}{
xxx
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$GetScreens_ui()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Nothing
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ActionOn_New_DataIn"></a>}}
\if{latex}{\out{\hypertarget{method-ActionOn_New_DataIn}{}}}
\subsection{Method \code{ActionOn_New_DataIn()}}{
xxx
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$ActionOn_New_DataIn()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Nothing
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Launch_Module_Server"></a>}}
\if{latex}{\out{\hypertarget{method-Launch_Module_Server}{}}}
\subsection{Method \code{Launch_Module_Server()}}{
This function calls the server part of each module composing the pipeline
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$Launch_Module_Server()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Nothing
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Global_server"></a>}}
\if{latex}{\out{\hypertarget{method-Global_server}{}}}
\subsection{Method \code{Global_server()}}{
xxxxx
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$Global_server(input, output)}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Nothing
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ActionOn_Data_Trigger"></a>}}
\if{latex}{\out{\hypertarget{method-ActionOn_Data_Trigger}{}}}
\subsection{Method \code{ActionOn_Data_Trigger()}}{
Catch the return value of a module and update the list of isDone modules
This list is updated with the names of datasets present in the rv$tmp
variable. One set to TRUE all the elements in isDone which have a corresponding
element in names(rv$tmp).
One cannot simply set to TRUE the last element of rv$tmp because it will does
not work in case of a reseted module (it is not in the names(rv$tmp) list
anymore)
If a value (not NULL) is received, then it corresponds to the module
pointed by the current position
This function also updates the list isDone
This function updates the current dataset (self$rv$dataIn)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$ActionOn_Data_Trigger()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Nothing
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetMaxValidated_BeforeCurrentPos"></a>}}
\if{latex}{\out{\hypertarget{method-GetMaxValidated_BeforeCurrentPos}{}}}
\subsection{Method \code{GetMaxValidated_BeforeCurrentPos()}}{
This function calls the server part of each module composing the pipeline
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$GetMaxValidated_BeforeCurrentPos()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Nothing
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetMaxValidated_BeforePos"></a>}}
\if{latex}{\out{\hypertarget{method-GetMaxValidated_BeforePos}{}}}
\subsection{Method \code{GetMaxValidated_BeforePos()}}{
This function calls the server part of each module composing the pipeline
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$GetMaxValidated_BeforePos(pos)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pos}}{xxx}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Nothing
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PrepareData2Send"></a>}}
\if{latex}{\out{\hypertarget{method-PrepareData2Send}{}}}
\subsection{Method \code{PrepareData2Send()}}{
This function calls the server part of each module composing the pipeline
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$PrepareData2Send()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Nothing
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
